name: Deploy PDSL Frontend and Data

on:
  push:
    branches:
      - main # Or your default branch
    paths:
      - 'index.html'
      - 'style.css'
      - 'script.js'
      - 'data/servers.json' # Trigger on data changes too, to ensure Pages rebuilds if data is manually updated
      # Add other frontend files/dirs if they are created
  workflow_dispatch: # Allows manual triggering

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy-frontend:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository but ensure only root files are served
          # if your site is in the root. If in a subfolder, adjust path.
          path: '.' 

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Optional: Job to trigger Cloudflare Worker scheduled task (if not using internal cron)
  # trigger-worker-refresh:
  #   needs: deploy-frontend # Optional: run after frontend deployment
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main' # Example: only on push to main
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Trigger Cloudflare Worker Scheduled Endpoint
  #       env:
  #         CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }} # Secret needed for Cloudflare API
  #         CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
  #         CLOUDFLARE_WORKER_NAME: "pdsl-worker" # Your worker name
  #       run: |
  #         # This requires your worker to have a specific endpoint that triggers the refresh
  #         # if you don't want to rely solely on the [schedules] cron in wrangler.toml.
  #         # Or, you can use the Cloudflare API to trigger a dispatch to a named worker schedule.
  #         echo "Triggering worker refresh - details depend on Cloudflare API usage or a custom trigger endpoint."
  #         # Example using curl to trigger a worker if it has a /refresh endpoint (not in current worker script)
  #         # curl -X POST "https://your-worker-url.workers.dev/refresh" -H "Authorization: Bearer YOUR_TRIGGER_TOKEN_IF_ANY"
  #         # For triggering a schedule directly (more robust):
  #         # curl -X POST "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/workers/scripts/${CLOUDFLARE_WORKER_NAME}/schedules" \
  #         #      -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
  #         #      -H "Content-Type: application/json" 